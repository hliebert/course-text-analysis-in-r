Importance Weighted Active Learning

Importance Weighted Active Learning
Alina Beygelzimer

beygel@us.ibm.com

IBM Thomas J. Watson Research Center
Hawthorne, NY 10532, USA

arXiv:0812.4952v4 [cs.LG] 20 May 2009

Sanjoy Dasgupta

dasgupta@cs.ucsd.edu

University of California, San Diego
La Jolla, CA 92093, USA

John Langford

jl@yahoo-inc.com

Yahoo! Research
New York, NY 10018, USA

Editor:

Abstract
We present a practical and statistically consistent scheme for actively learning binary
classifiers under general loss functions. Our algorithm uses importance weighting to correct
sampling bias, and by controlling the variance, we are able to give rigorous label complexity
bounds for the learning process. Experiments on passively labeled data show that this
approach reduces the label complexity required to achieve good predictive performance on
many learning problems.
Keywords: Active learning, importance weighting, sampling bias

1. Introduction
Active learning is typically defined by contrast to the passive model of supervised learning.
In passive learning, all the labels for an unlabeled dataset are obtained at once, while in
active learning the learner interactively chooses which data points to label. The great hope
of active learning is that interaction can substantially reduce the number of labels required,
making learning more practical. This hope is known to be valid in certain special cases,
where the number of labels needed to learn actively has been shown to be logarithmic in
the usual sample complexity of passive learning; such cases include thresholds on a line, and
linear separators with a spherically uniform unlabeled data distribution (Dasgupta et al.,
2005).
Many earlier active learning algorithms, such as (Cohn et al., 1994; Dasgupta et al.,
2005), have problems with data that are not perfectly separable under the given hypothesis
class. In such cases, they can exhibit a lack of statistical consistency: even with an infinite
labeling budget, they might not converge to an optimal predictor (see Dasgupta and Hsu
(2008) for a discussion).
This problem has recently been addressed in two threads of research. One approach (Balcan et al., 2006; Dasgupta et al., 2008; Hanneke, 2007) constructs learning algorithms that
explicitly use sample complexity bounds to assess which hypotheses are still “in the running” (given the labels seen so far), thereby assessing the relative value of different unlabeled
1

Beygelzimer, Dasgupta and Langford

points (in terms of whether they help distinguish between the remaining hypotheses). These
algorithms have the usual PAC-style convergence guarantees, but they also have rigorous
label complexity bounds that are in many cases significantly better than the bounds for
passive supervised learning. However, these algorithms have yet to see practical use. First,
they are built explicitly for 0–1 loss and are not easily adapted to most other loss functions.
This is problematic because in many applications, other loss functions are more appropriate
for describing the problem, or make learning more tractable (as with convex proxy losses
on linear representations). Second, these algorithms make internal use of generalization
bounds that are often loose in practice, and they can thus end up requiring far more labels
than are really necessary. Finally, they typically require an explicit enumeration over the
hypothesis class (or an ǫ-cover thereof), which is generally computationally intractable.
The second approach to active learning uses importance weights to correct sampling
bias (Bach, 2007; Sugiyama, 2006). This approach has only been analyzed in limited settings. For example, (Bach, 2007) considers linear models and provides an analysis of consistency in cases where either (i) the model class fits the data perfectly, or (ii) the sampling
strategy is non-adaptive (that is, the data point queried at time t doesn’t depend on the
sequence of previous queries). The analysis in these works is also asymptotic rather than
yielding finite label bounds, while minimizing the actual label complexity is of paramount
importance in active learning. Furthermore, the analysis does not prescribe how to choose
importance weights, and a poor choice can result in high label complexity.
Importance-weighted active learning
We address the problems above with an active learning scheme that provably yields PACstyle label complexity guarantees. When presented with an unlabeled point xt , this scheme
queries its label with a carefully chosen probability pt , taking into account the identity of
the point and the history of labels seen so far. The points that end up getting labeled are
then weighted according to the reciprocals of these probabilities (that is, 1/pt ), in order to
remove sampling bias. We show (theorem 1) that this simple method guarantees statistical consistency: for any distribution and any hypothesis class, active learning eventually
converges to the optimal hypothesis in the class.
As in any importance sampling scenario, the biggest challenge is controlling the variance
of the process. This depends crucially on how the sampling probability pt is chosen. Our
strategy, roughly, is to make it proportional to the spread of values h(xt ), as h ranges over
the remaining candidate hypotheses (those with good performance on the labeled points
so far). For this setting of pt , which we call IWAL(loss-weighting), we have two results.
First, we show (theorem 2) a fallback guarantee that the label complexity is never much
worse than that of supervised learning. Second, we rigorously analyze the label complexity
in terms of underlying parameters of the learning problem (theorem 7). Previously, label
complexity bounds for active learning were only known for 0–1 loss, and were based on the
disagreement coefficient of the learning problem (Hanneke, 2007). We generalize this notion
to general loss functions, and analyze label complexity in terms of it. We consider settings
in which these bounds turn out to be roughly the square root of the sample complexity of
supervised learning.
2

Importance Weighted Active Learning

In addition to these upper bounds, we show a general lower bound on the label complexity of active learning (theorem 9) that significantly improves the best previous such
result (Kääriäinen, 2006).
We conduct practical experiments with two IWAL algorithms. The first is a specialization of IWAL(loss-weighting) to the case of linear classifiers with convex loss functions;
here, the algorithm becomes tractable via convex programming (section 7). The second, IWAL(bootstrap), uses a simple bootstrapping scheme that reduces active learning to
(batch) passive learning without requiring much additional computation (section 7.2). In
every case, these experiments yield substantial reductions in label complexity compared to
passive learning, without compromising predictive performance. They suggest that IWAL is
a practical scheme that can reduce the label complexity of active learning without sacrificing
the statistical guarantees (like consistency) we take for granted in passive learning.
Other related work
The active learning algorithms of Abe and Mamitsuka (1998), based on boosting and bagging, are similar in spirit to our IWAL(bootstrap) algorithm in section 7.2. But these earlier
algorithms are not consistent in the presence of adversarial noise: they may never converge
to the correct solution, even given an infinite label budget. In contrast, IWAL(bootstrap)
is consistent and satisfies further guarantees (section 2).
The field of experimental design (Pukelsheim, 2006) emphasizes regression problems in
which the conditional distribution of the response variable given the predictor variables
is assumed to lie in a certain class; the goal is to synthesize query points such that the
resulting least-squares estimator has low variance. In contrast, we are interested in an
agnostic setting, where no assumptions about the model class being powerful enough to
represent the ideal solution exist. Moreover, we are not allowed to synthesize queries, but
merely to choose them from a stream (or pool) of candidate queries provided to us. A
telling difference between the two models is that in experimental design, it is common to
query the same point repeatedly, whereas in our setting this would make no sense.

2. Preliminaries
Let X be the input space and Y the output space. We consider active learning in the
streaming setting where at each step t, a learner observes an unlabeled point xt ∈ X and
has to decide whether to ask for the label yt ∈ Y . The learner works with a hypothesis
space H = {h : X → Z}, where Z is a prediction space.
The algorithm is evaluated with respect to a given loss function l : Z × Y → [0, ∞).
The most common loss function is 0–1 loss, in which Y = Z = {−1, 1} and l(z, y) = 1(y 6=
z) = 1(yz < 0). The following examples address the binary case Y = {−1, 1} with Z ⊂ R:
• l(z, y) = (1 − yz)+ (hinge loss),
• l(z, y) = ln(1 + e−yz ) (logistic loss),
• l(z, y) = (y − z)2 = (1 − yz)2 (squared loss), and
• l(z, y) = |y − z| = |1 − yz| (absolute loss).
3

Beygelzimer, Dasgupta and Langford

Notice that all the loss functions mentioned here are of the form l(z, y) = φ(yz) for some
function φ on the reals. We specifically highlight this subclass of loss functions when proving
label complexity bounds. Since these functions are bounded (if Z is), we further assume
they are normalized to output a value in [0, 1].

3. The Importance Weighting Skeleton
Algorithm 1 describes the basic outline of importance-weighted active learning (IWAL).
Upon seeing xt , the learner calls a subroutine rejection-threshold (instantiated in later sections), which looks at xt and past history to return the probability pt of requesting yt .
The algorithm maintains a set of labeled examples seen so far, each with an importance
weight: if yt ends up being queried, its weight is set to 1/pt .
Algorithm 1 IWAL (subroutine rejection-threshold)
Set S0 = ∅.
For t from 1, 2, . . . until the data stream runs out:
1. Receive xt .
2. Set pt = rejection-threshold(xt , {xi , yi , pi , Qi : 1 ≤ i < t}).
3. Flip a coin Qt ∈ {0, 1} with E[Qt ] = pt .
If Qt = 1, request yt and set St = St−1 ∪ {(xt , yt , 1/pt )}, else St = St−1 .
P
4. Let ht = arg minh∈H (x,y,c)∈St c · l(h(x), y).
Let D be the underlying probability distribution on X × Y . The expected loss of h ∈ H
on D is given by L(h) = E(x,y)∼D l(h(x), y). Since D is always clear from context, we drop
it from notation. The importance weighted estimate of the loss at time T is
LT (h) =

T
1 X Qt
l(h(xt ), yt ),
T
pt
t=1

where Qt is as defined in the algorithm. It is easy to see that E[LT (h)] = L(h), with the
expectation taken over all the random variables involved. Theorem 2 gives large deviation
bounds for LT (h), provided that the probabilities pt are chosen carefully.
3.1 A safety guarantee for IWAL
A desirable property for a learning algorithm is consistency: Given an infinite budget
of unlabeled and labeled examples, does it converge to the best predictor? Some early
active learning algorithms (Cohn et al., 1994; Dasgupta et al., 2005) do not satisfy this
baseline guarantee: they have problems if the data cannot be classified perfectly by the
given hypothesis class. We prove that IWAL algorithms are consistent, as long as pt is
bounded away from 0. Further, we prove that the label complexity required is within a
constant factor of supervised learning in the worst case.
4

Importance Weighted Active Learning

Theorem 1 For all distributions D, for all finite hypothesis classes H, for any δ > 0, if
there is a constant pmin > 0 such that pt ≥ pmin for all 1 ≤ t ≤ T , then
s


√
ln |H| + ln 2δ
2
 < δ.
P max |LT (h) − L(h)| >
h∈H
pmin
T

Comparing this result to the usual sample complexity bounds in supervised learning (for example, corollary 4.2 of (Langford, 2005)), we see that the label complexity is at most 2/p2min
times that of a supervised algorithm. For simplicity, the bound is given in terms of ln |H|
rather than the VC dimension of H. The argument, which is a martingale modification of
standard results, can be extended to VC spaces.
Proof Fix the underlying distribution. For a hypothesis h ∈ H, consider a sequence of
random variables U1 , . . . , UT with

Qt
l(h(xt ), yt ) − L(h).
pt
P
Since pt ≥ pmin , |Ut | ≤ 1/pmin . The sequence Zt = ti=1 Ui is a martingale, letting Z0 = 0.
Indeed, for any 1 ≤ t ≤ T ,
Ut =

E[Zt | Zt−1 , . . . , Z0 ] = EQt ,xt ,yt ,pt [Ut + Zt−1 | Zt−1 , . . . , Z0 ]


Qt
l(h(xt ), yt ) − L(h) Zt−1 , . . . , Z0
= Zt−1 + EQt ,xt ,yt ,pt
pt

= Ext ,yt [ l(h(xt ), yt ) − L(h) + Zt−1 | Zt−1 , . . . , Z0 ] = Zt−1 .

Observe that |Zt+1 − Zt | = |Ut+1 | ≤ 1/pmin for all 0 ≤ t < T . Using ZT = T (LT (h) − L(h))
and applying Azuma’s inequality (Azuma, 1967), we see that for any λ > 0,
"
√ #


λ
2
λ T
√
P |LT (h) − L(h)| >
< 2e−λ /2 .
= P ZT >
pmin
pmin T
p
Setting λ = 2(ln |H| + ln(2/δ)) and taking a union bound over h ∈ H then yields the
desired result.

4. Setting the Rejection Threshold: Loss Weighting
Algorithm 2 gives a particular instantiation of the rejection threshold subroutine in IWAL.
The subroutine maintains an effective hypothesis class Ht , which is initially all of H and
then gradually shrinks by setting Ht+1 to the subset of Ht whose empirical loss isn’t too
much worse than L∗t , the smallest empirical loss in Ht :
Ht+1 = {h ∈ Ht : Lt (h) ≤ L∗t + ∆t }.
The allowed slack ∆t =
ity bound.

p

(8/t) ln(2t(t + 1)|H|2 /δ) comes from a standard sample complex-

5

Beygelzimer, Dasgupta and Langford

We will show that, with high probability, any optimal hypothesis h∗ is always in Ht ,
and thus all other hypotheses can be discarded from consideration. For each xt , the lossweighting scheme looks at the range of predictions on xt made by hypotheses in Ht and sets
the sampling probability pt to the size of this range. More precisely,
pt = max max l(f (xt ), y) − l(g(xt ), y).
f,g∈Ht

y

Since the loss values are normalized to lie in [0, 1], we can be sure that pt is also in this
interval. Next section shows that the resulting IWAL has several desirable properties.
Algorithm 2 loss-weighting (x, {xi , yi , pi , Qi : i < t})
1. Initialize H0 = H.
2. Update
t−1

1 X Qi
l(h(xi ), yi ),
= min
h∈Ht−1 t − 1
p
i=1 i
(
)
t−1
1 X Qi
∗
Ht = h ∈ Ht−1 :
l(h(xi ), yi ) ≤ Lt−1 + ∆t−1 .
t−1
pi

L∗t−1

i=1

3. Return pt = maxf,g∈Ht ,y∈Y l(f (x), y) − l(g(x), y).

4.1 A generalization bound
We start with a large deviation bound for each ht output by IWAL(loss-weighting). It is not
a corollary of theorem 1 because it does not require the sampling probabilities be bounded
below away from zero.
Theorem 2 Pick any data distribution D and hypothesis class H, and let h∗ ∈ H be a
minimizer of the loss function with respect to D. Pick any δ > 0. With probability at least
1 − δ, for any T ≥ 1,
◦ h∗ ∈ HT , and
◦ L(f ) − L(g) ≤ 2∆T −1 for any f, g ∈ HT .
In particular, if hT is the output of IWAL(loss-weighting), then L(hT ) − L(h∗ ) ≤ 2∆T −1 .
We need the following lemma for the proof.
Lemma 1 For all data distributions D, for all hypothesis classes H, for all δ > 0, with
probability at least 1 − δ, for all T and all f, g ∈ HT ,
|LT (f ) − LT (g) − L(f ) + L(g)| ≤ ∆T .
6

Importance Weighted Active Learning

Proof Pick any T and f, g ∈ HT . Define
Zt =


Qt
l(f (xt ), yt ) − l(g(xt ), yt ) − (L(f ) − L(g)).
pt

Then E [Zt | Z1 , . . . , Zt−1 ] = Ext ,yt [ l(f (xt ), yt ) − l(g(xt ), yt ) − (L(f ) − L(g)) | Z1 , . . . , Zt−1 ] =
0. Thus Z1 , Z2 , . . . is a martingale difference sequence, and we can use Azuma’s inequality
to show that its sum is tightly concentrated, if the individual Zt are bounded.
To check boundedness, observe that since f and g are in HT , they must also be in
H1 , H2 , . . . , HT −1 . Thus for all t ≤ T , pt ≥ |l(f (xt ), yt ) − l(g(xt ), yt )|, whereupon |Zt | ≤
1
pt |l(f (xt ), yt ) − l(g(xt ), yt )| + |L(f ) − L(g)| ≤ 2.
We allow failure probability δ/T (T + 1) at time T . Applying Azuma’s inequality, we
have
P[|LT (f ) − LT (g) − L(f ) + L(g)| ≥ ∆T ]
"
#
!
T 
1 X Qt
= P
≥ ∆T
(l(f (Xt ), Yt ) − l(g(Xt ), Yt )) − (L(f ) − L(g))
T t=1 pt
#
" T
X
δ
2
.
Zt ≥ T ∆T ≤ 2e−T ∆T /8 =
= P
T (T + 1)|H|2
t=1

Since HT is a random subset of H, it suffices to take a union bound over all f, g ∈ H, and
T . A union bound over T finishes the proof.
Proof (Theorem 2) Start by assuming that the 1 − δ probability event of lemma 1 holds.
We first show by induction that h∗ = arg minh∈H L(h) is in HT for all T . It holds at T = 1,
since H1 = H0 = H. Now suppose it holds at T , and show that it is true at T + 1. Let hT
minimize LT over HT . By lemma 1, LT (h∗ ) − LT (hT ) ≤ L(h∗ ) − L(hT ) + ∆T ≤ ∆T . Thus
LT (h∗ ) ≤ L∗T + ∆T and hence h∗ ∈ HT +1 .
Since HT ⊆ HT −1 , lemma 1 implies that for for any f, g ∈ HT ,
L(f ) − L(g) ≤ LT −1 (f ) − LT −1 (g) + ∆T −1 ≤ L∗T −1 + ∆T −1 − L∗T −1 + ∆T −1 = 2∆T −1 .
Since hT , h∗ ∈ HT , we have L(hT ) ≤ L(h∗ ) + 2∆T −1 .

5. Label Complexity
We showed that the loss of the classifier output by IWAL(loss-weighting) is similar to the
loss of the classifier chosen passively after seeing all T labels. How many of those T labels
does the active learner request?
Dasgupta et al. (2008) studied this question for an active learning scheme under 0–1
loss. For learning problems with bounded disagreement coefficient (Hanneke, 2007), the
number of queries was found to be O(ηT + d log2 T ), where d is the VC dimension of the
function class, and η is the best error rate achievable on the underlying distribution by that
7

Beygelzimer, Dasgupta and Langford

function class. We will soon see (section 6) that the term ηT is inevitable for any active
learning scheme; the remaining term has just a polylogarithmic dependence on T .
We generalize the disagreement coefficient to arbitrary loss functions
and


p show that,
under conditions similar to the earlier result, the number of queries is O ηT + dT log2 T ,
where η is now the best achievable loss. The inevitable ηT is still there, and the second
term is still sublinear, though not polylogarithmic as before.
5.1 Label Complexity: Main Issues
Suppose the loss function is minimized by h∗ ∈ H, with L∗ = L(h∗ ). Theorem 2 shows
that at time t, the remaining hypotheses Ht include h∗ and all have losses in the range
[L∗ , L∗ + 2∆t−1 ]. We now prove that under suitable conditions, the sampling probability
∗+∆
pt has expected value ≈ LP
total number of labels queried upto
t−1 . Thus the expected
p
∗
time T is roughly L T + Tt=1 ∆t−1 ≈ L∗ T + T ln |H|.
To motivate the proof, consider a loss function l(z, y) = φ(yz); all our examples are of
this form. Say φ is differentiable with 0 < C0 ≤ |φ′ | ≤ C1 . Then the sampling probability
for xt is
pt =
=

max

max

f,g∈Ht y∈{−1,+1}

l(f (xt ), y) − l(g(xt ), y)

max max φ(yf (xt )) − φ(yg(xt ))

f,g∈Ht

y

≤ C1 max max |yf (xt ) − yg(xt )|
f,g∈Ht

y

= C1 max |f (xt ) − g(xt )|
f,g∈Ht

≤ 2C1 max |h(xt ) − h∗ (xt )|.
h∈Ht

So pt is determined by the range of predictions on xt by hypotheses in Ht . Can we bound
the size of this range, given that any h ∈ Ht has loss at most L∗ + 2∆t−1 ?
2∆t−1 ≥ L(h) − L∗

≥ Ex,y |l(h(x), y) − l(h∗ (x), y)| − 2L∗

≥ Ex,y C0 |y(h(x) − h∗ (x))| − 2L∗

= C0 Ex |h(x) − h∗ (x)| − 2L∗ .

So we can upperbound maxh∈Ht Ex |h(x)−h∗ (x)| (in terms of L∗ and ∆t−1 ), whereas we want
to upperbound the expected value of pt , which is proportional to Ex maxh∈Ht |h(x) − h∗ (x)|.
The ratio between these two quantities is related to a fundamental parameter of the learning
problem, a generalization of the disagreement coefficient (Hanneke, 2007).
We flesh out this intuition in the remainder of this section. First we describe a broader
class of loss functions than those considered above (including 0–1 loss, which is not differentiable); a distance metric on hypotheses, and a generalized disagreement coefficient. We
then prove that for this broader class, active learning performs better than passive learning
when the generalized disagreement coefficient is small.
8

Importance Weighted Active Learning

5.2 A subclass of loss functions
We give label complexity upper bounds for a class of loss functions that includes 0–1 loss and
logistic loss but not hinge loss. Specifically, we require that the loss function has bounded
slope asymmetry, defined below.
Recall earlier notation: response space Z, classifier space H = {h : X → Z}, and loss
function l : Z × Y → [0, ∞). Henceforth, the label space is Y = {−1, +1}.
Definition 3 The slope asymmetry of a loss function l : Z × Y → [0, ∞) is
Kl = sup

z,z ′ ∈Z

maxy∈Y |l(z, y) − l(z ′ , y)|
.
miny∈Y |l(z, y) − l(z ′ , y)|

The slope asymmetry is 1 for 0–1 loss, and ∞ for hinge loss. For differentiable loss functions
l(z, y) = φ(yz), it is easily related to bounds on the derivative.
Lemma 2 Let lφ (z, y) = φ(zy), where φ is a differentiable function defined on Z =
[−B, B] ⊂ R. Suppose C0 ≤ |φ′ (z)| ≤ C1 for all z ∈ Z. Then for any z, z ′ ∈ Z, and
any y ∈ {−1, +1},
C0 |z − z ′ | ≤ |lφ (z, y) − lφ (z ′ , y)| ≤ C1 |z − z ′ |.
Thus lφ has slope asymmetry at most C1 /C0 .
Proof By the mean value theorem, there is some ξ ∈ Z such that lφ (z, y) − lφ (z ′ , y) =
φ(yz) − φ(yz ′ ) = φ′ (ξ)(yz − yz ′ ). Thus |lφ (z, y) − lφ (z ′ , y)| = |φ′ (ξ)| · |z − z ′ |, and the rest
follows from the bounds on φ′ .
For instance, this immediately applies to logistic loss.
Corollary 4 Logistic loss l(z, y) = ln(1 + e−yz ), defined on label space Y = {−1, +1} and
response space [−B, B], has slope asymmetry at most 1 + eB .
5.3 Topologizing the space of classifiers
We introduce a simple distance function on the space of classifiers.
Definition 5 For any f, g ∈ H and distribution D define ρ(f, g) = Ex∼D maxy |l(f (x), y)−
l(g(x), y)|. For any r ≥ 0, let B(f, r) = {g ∈ H : ρ(f, g) ≤ r}.
Suppose L∗ = minh∈H L(h) is realized at h∗ . We know that at time t, the remaining
hypotheses have loss at most L∗ + 2∆t−1 . Does this mean they are close to h∗ in ρ-distance?
The ratio between the two can be expressed in terms of the slope asymmetry of the loss.
Lemma 3 For any distribution D and any loss function with slope asymmetry Kl , we have
ρ(h, h∗ ) ≤ Kl (L(h) + L∗ ) for all h ∈ H.
9

Beygelzimer, Dasgupta and Langford

Proof For any h ∈ H,
ρ(h, h∗ ) = Ex maxy |l(h(x), y) − l(h∗ (x), y)|
≤ Kl Ex,y |l(h(x), y) − l(h∗ (x), y)|

≤ Kl (Ex,y [l(h(x), y)] + Ex,y [l(h∗ (x), y)])
= Kl (L(h) + L(h∗ )).

5.4 A generalized disagreement coefficient
When analyzing the A2 algorithm (Balcan et al., 2006) for active learning under 0–1 loss,
Hanneke (2007) found that its label complexity could be characterized in terms of what he
called the disagreement coefficient of the learning problem. We now generalize this notion
to arbitrary loss functions.
Definition 6 The disagreement coefficient is the infimum value of θ such that for all r,
Ex∼D suph∈B(h∗ ,r) supy |l(h(x), y) − l(h∗ (x), y)| ≤ θr.
Here is a simple example for linear separators.
Lemma 4 Suppose H consists of linear classifiers {u ∈ Rd : kuk ≤ B} and the data
distribution D is uniform over the surface of the unit sphere in Rd . Suppose the loss function
is l(z, y) = φ(yz) for√differentiable φ with C0 ≤ |φ′ | ≤ C1 . Then the disagreement coefficient
is at most (2C1 /C0 ) d.
Proof Let h∗ be the optimal classifier, and h any other classifier with ρ(h, h∗ ) ≤ r. Let
u∗ , u be the corresponding vectors in Rd . Using lemma 2,
r ≥ Ex∼D sup |l(h(x), y) − l(h∗ (x), y)|
y

≥ C0 Ex∼D |h(x) − h∗ (x)|

√
= C0 Ex∼D |(u − u∗ ) · x| ≥ C0 ku − u∗ k/(2 d).
∗
∗
Thus
√ for any h ∈ B(h , r), we have that the corresponding vectors satisfy ku − u k ≤
2r d/C0 . We can now bound the disagreement coefficient:

Ex∼D

sup
h∈B(h∗ ,r)

≤ C1 Ex∼D

sup |l(h(x), y) − l(h∗ (x), y)|
y

sup
h∈B(h∗ ,r)

|h(x) − h∗ (x)|

√
≤ C1 Ex sup{|(u − u∗ ) · x| : ku − u∗ k ≤ 2r d/C0 }
√
≤ C1 · 2r d/C0 .

10

Importance Weighted Active Learning

5.5 Upper Bound on Label Complexity
Finally, we give a bound on label complexity for learning problems with bounded disagreement coefficient and loss functions with bounded slope asymmetry.
Theorem 7 For all learning problems D and hypothesis spaces H, if the loss function has
slope asymmetry Kl , and the learning problem has disagreement coefficient θ, then for all
δ > 0, with probability at least 1 − δ over the choice of data, the expected number of labels
requested by IWAL(loss-weighting) during the first T iterations is at most
p
4θ · Kl · (L∗ T + O( T ln(|H|T /δ))),

where L∗ is the minimum loss achievable on D by H, and the expectation is over the
randomness in the selective sampling.
Proof Suppose h∗ ∈ H achieves loss L∗ . Pick any time t. By theorem 2, Ht ⊂ {h ∈ H :
L(h) ≤ L∗ + 2∆t−1 } and by lemma 3, Ht ⊂ B(h∗ , r) for r = Kl (2L∗ + 2∆t−1 ). Thus, the
expected value of pt (over the choice of x at time t) is at most
Ex∼D sup sup |l(f (x), y) − l(g(x), y)| ≤ 2 Ex∼D sup sup |l(h(x), y) − l(h∗ (x), y)|
f,g∈Ht

y

h∈Ht

≤ 2 Ex∼D

sup

y

sup |l(h(x), y) − l(h∗ (x), y)|

h∈B(h∗ ,r) y

≤ 2θr = 4θ · Kl · (L∗ + ∆t−1 ) .
Summing over t = 1, . . . , T , we get the lemma.

5.6 Other examples of low label complexity
It is also sometimes possible to achieve substantial label complexity reductions over passive
learning, even when the slope asymmetry is infinite.
Example 1 Let the space X be the ball of radius 1 in d dimensions.
Let the distribution D on X be a point mass at the origin with weight 1 − β and label 1
and a point mass at (1, 0, 0, . . . , 0) with weight β and label −1 half the time and label 0 for
the other half the time.
Let the hypothesis space be linear with weight vectors satisfying ||w|| ≤ 1.
Let the loss of interest be squared loss: l(h(x), y) = (h(x) − y)2 which has infinite slope
asymmetry.
Observation 8 For the example above, IWAL(loss-weighting) requires only an expected β
fraction of the labeled samples of passive learning to achieve the same loss.
Proof Passive learning samples from the point mass at the origin a (1 − β) fraction of
the time, while active learning only samples from the point mass at (1, 0, 0, . . . , 0) since all
predictors have the same loss on samples at the origin.
Since all hypothesis h have the same loss for samples at the origin, only samples not at
the origin influence the sample complexity. Active learning samples from points not at the
origin 1/β more often than passive learning, implying the theorem.

11

Beygelzimer, Dasgupta and Langford

6. A lower bound on label complexity
(Kääriäinen, 2006) showed that for any hypothesis class H and any η > ǫ > 0, there is a
data distribution such that (a) the optimal error rate achievable by H is η; and (b) any
active learner that finds h ∈ H with error rate ≤ η + ǫ (with probability > 1/2) must make
η 2 /ǫ2 queries. We now strengthen this lower bound to dη 2 /ǫ2 , where d is the VC dimension
of H.
Let’s see how this relates to the label complexity rates of the previous section. It is wellknown that if a p
supervised learner sees T examples (for any T > d/η), its final hypothesis
has errorp≤ η + dη/T (Devroye et al., 1996) with high probability. Think of this as η + ǫ
for ǫ = dη/T . Our lower bound now implies that an active learner must make at least
dη 2 /ǫ2 = ηT queries. This explains the ηT leading term in all the label complexity bounds
we have discussed.
Theorem 9 For any η, ǫ > 0 such that 2ǫ ≤ η ≤ 1/4, for any input space X and hypothesis
class H (of functions mapping X into Y = {+1, −1}) of VC dimension 1 < d < ∞, there
is a distribution over X × Y such that (a) the best error rate achievable by H is η; (b) any
active learner seeking a classifier of error at most η + ǫ must make Ω(dη 2 /ǫ2 ) queries to
succeed with probability at least 1/2.
Proof Pick a set of d points xo , x1 , x2 , . . . , xd−1 shattered by H. Here is a distribution over
X×Y : point xo has probability 1−β, while each of the remaining xi has probability β/(d−1),
where β = 2(η + 2ǫ). At xo , the response is always y = 1. At xi , i ≥ 1, the response is y = 1
with probability 1/2 + γbi , where bi is either +1 or −1, and γ = 2ǫ/β = ǫ/(η + 2ǫ) < 1/4.
Nature starts by picking b1 , . . . , bd−1 uniformly at random. This defines the target
hypothesis h∗ : h∗ (xo ) = 1 and h∗ (xi ) = bi . Its error rate is β · (1/2 − γ) = η.
Any learner outputs a hypothesis in H and thus implicitly makes guesses at the underlying hidden bits bi . Unless it correctly determines bi for at least 3/4 of the points
x1 , . . . , xd−1 , the error of its hypothesis will be at least η + (1/4) · β · (2γ) = η + ǫ.
Now, suppose the active learner makes ≤ c(d− 1)/γ 2 queries, where c is a small constant
(c ≤ 1/125 suffices). We’ll show that it fails (outputs a hypothesis with error ≥ η + ǫ) with
probability at least 1/2.
We’ll say xi is heavily queried if the active learner queries it at least 4c/γ 2 times. At
most 1/4 of the xi ’s are heavily queried; without loss of generality, these are x1 , . . . , xk ,
for some k ≤ (d − 1)/4. The remaining xi get so few queries that the learner guesses each
corresponding bit bi with probability less than 2/3; this can be derived from Slud’s lemma
(below), which relates the tails of a binomial to that of a normal.
Let Fi denote the event that the learner gets bi wrong; so EFi ≥ 1/3 for i > k. Since
k ≤ (d − 1)/4, the probability that the learner fails is given by
P[learner fails] = P[F1 + · · · + Fd−1 ≥ (d − 1)/4]

≥ P[Fk+1 + · · · + Fd−1 ≥ (d − 1)/4]

≥ P[B ≥ (d − 1)/4] ≥ P[Z ≥ 0] = 1/2,
where B is a binomial((3/4)(d − 1), 1/3) random variable, Z is a standard normal, and
the last inequality follows from Slud’s lemma. Thus the active learner must make at least
12

Importance Weighted Active Learning

c(d − 1)/γ 2 = Ω(dη 2 /ǫ2 ) queries to succeed with probability at least 1/2.

Lemma 5 (Slud (1977)) Let B be a Binomial (n, p) random variable with p ≤ 1/2, and
let Zpbe a standard normal. For any k ∈ [np, n(1 − p)], P[B ≥ k] ≥ P[Z ≥ (k −
np)/ np(1 − p)].
Theorem 9 uses the same example that is used for lower bounds on supervised sample
complexity (section 14.4 of (Devroye et al., 1996)), although in that case the lower bound is
dη/ǫ2 . The bound for active learning is smaller by a factor of η because the active learner
can avoid making repeated queries to the “heavy” point xo , whose label is immediately
obvious.

7. Implementing IWAL
IWAL(loss-weighting) can be efficiently implemented in the case where H is the class of
bounded-length linear separators {u ∈ Rd : kuk2 ≤ B} and the loss function is convex:
l(z, y) = φ(yz) for convex φ.
Each iteration of Algorithm 2 involves solving two optimization problems over a restricted hypothesis set
Ht =

\n

t′ <t

h∈H :

1
t′

Pt′

Qi
i=1 pi l(h(xi ), yi )

o
≤ L∗t′ + ∆t′ .

Replacing each h by its corresponding vector u, this is

Ht =

\

t′ <t

(

′

t
1 X Qi
d
2
u ∈ R : kuk ≤ B and ′
φ(u · (yi xi )) ≤ L∗t′ + ∆t′
t
pi
i=1

)

.

an intersection of convex constraints.
PT Qi
The first optimization in Algorithm 2 is L∗T = minu∈HT
i=1 pi φ(u · (yi xi )), a convex
program.
The second optimization is maxu,v∈HT φ(y(u · x)) − φ(y(v · x)), y ∈ {+1, −1} (where u, v
correspond to functions f, g). If φ is nonincreasing (as it is for 0–1, hinge, or logistic loss),
then the solution of this problem is max{φ(A(x)) − φ(−A(−x)), φ(A(−x)) − φ(−A(x))},
where A(x) is the solution of a convex program: A(x) ≡ minu∈HT u · x. The two cases
inside the max correspond to the choices y = 1 and y = −1.
Thus Algorithm 2 can be efficiently implemented for nonincreasing convex loss functions
and bounded-length linear separators. In our experiments, we use a simpler implementation.
For the first problem (determining L∗T ), we minimize over H rather than HT ; for the second
(determining A(x)), instead of defining HT by T − 1 convex constraints, we simply enforce
the last of these constraints (corresponding to time T − 1). This may lead to an overly
conservative choice of pt , but by theorem 1, the consistency of hT is assured.
13

Beygelzimer, Dasgupta and Langford

7.1 Experiments
Recent consistent active learning algorithms (Balcan et al., 2006; Dasgupta et al., 2008) have
suffered from computational intractability. This section shows that importance weighted
active learning is practical.
We implemented IWAL with loss-weighting for linear separators under logistic loss. As
outlined above, the algorithm involves two convex optimizations as subroutines. These were
coded using log-barrier methods (section 11.2 of (Boyd and Vandenberghe, 2004)). We tried
out the algorithm on the MNIST data set of handwritten digits by picking out the 3’s and
5’s as two classes, and choosing 1000 exemplars of each for training and another 1000 of
each for testing. We used PCA to reduce the
p dimension from 784 to 25. The algorithm
to often be loose
uses a generalization bound ∆t of the form d/t; since this is believed
√
in high dimensions, we also tried a more optimistic bound of 1/ t. In either case, active
learning achieved very similar performance (in terms of test error or test logistic loss) to a
supervised learner that saw all the labels. The active learner asked for less than 1/3 of the
labels.
number of queries

logistic loss on test set

1500

solid: supervised
dotted: active

1400

1300

1200
0

500
1000
1500
number of points seen

number of points queried

test logistic loss

2000

2000
1500
1000
500
0
0

500
1000
1500
number of points seen

2000

Figure 1: Top: Test logistic loss as number of points seen grows from 0 to 2000 (solid:
supervised; dotted: active learning). Bottom: #queries vs #points seen.

7.2 Bootstrap instantiation of IWAL
This section reports another practical implementation of IWAL, using a simple bootstrapping scheme to compute the rejection threshold. A set H of predictors is trained on some initial set of labeled examples and serves as an approximation of the version
 space. Given a new
unlabeled example
x,
the
sampling
probability
is
set
to
p
+(1−p
)
min
min maxy;hi ,hj ∈H L(hi (x), y)−

L(hj (x), y) , where pmin is a lower bound on the sampling probability.
We implemented this scheme for binary and multiclass classification loss, using 10 decision trees bootstrapped on the initial 1/10th of the training set, setting pmin = 0.1. For
simplicity, we did’t retrain the predictors for each new queried point, i.e., the predictors were
trained once on the initial sample. The final predictor is trained on the collected importanceweighted training set, and tested on the test set. The Costing technique (Zadrozny et al.,
2003) was used to remove the importance weights using rejection sampling. (The same tech14

Importance Weighted Active Learning

nique can be applied to any loss function.) The resulting unweighted classification problem
was then solved using a decision tree learner (J48). On the same MNIST dataset as in
section 7.1, the scheme performed just as well as passive learning, using only 65.6% of the
labels (see Figure 2).
2000

2000
supervised
active

supervised
active

1800
number of points queried

test error (out of 2000)

1750
1500
1250
1000
750
500
250

1600
1400
1200
1000
800
600
400
200

0

0
500

1000
1500
number of points seen

2000

0

500

1000
1500
number of points seen

2000

Figure 2: Top: Test error as number of points seen grows from 200 (the size of the initial batch, where active learning queries every label) to 2000 (solid: supervised;
dotted: active learning). Bottom: #queries vs #points seen.

The following table reports additional experiments performed on standard benchmark
datasets, bootstrapped on the initial 10%.
Data set
adult
letter
pima
spambase
yeast

IWAL
error rate
14.1%
13.8%
23.3%
9.0%
28.8%

Passive
error rate
14.5%
13.0%
26.4%
8.9%
28.6%

Queried
40%
75.0%
67.6%
44.2%
82.2%

Train/test
split
4000/2000
14000/6000
538/230
3221/1380
1000/500

8. Conclusion
The IWAL algorithms and analysis presented here remove many reasonable objections to the
deployment of active learning. IWAL satisfies the same convergence guarantee as common
supervised learning algorithms, it can take advantage of standard algorithms (section 7.2),
it can deal with very flexible losses, and in theory and practice it can yield substantial label
complexity improvements.
Empirically, in every experiment we have tried, IWAL has substantially reduced the
label complexity compared to supervised learning, with no sacrifice in performance on the
same number of unlabeled examples. Since IWAL explicitly accounts for sample selection
bias, we can be sure that these experiments are valid for use in constructing new datasets.
This implies another subtle advantage: because the sampling bias is known, it is possible to hypothesize and check the performance of IWAL algorithms on datasets drawn by
IWAL. This potential for self-tuning off-policy evaluation is extremely useful when labels
are expensive.
15

Beygelzimer, Dasgupta and Langford

9. Acknowledgements
We would like to thank Alex Strehl for a very careful reading which caught a couple proof
bugs.

References
N. Abe and H. Mamitsuka. Query learning strategies using boosting and bagging. In
Proceedings of the International Conference on Machine Learning, pages 1–9, 1998.
K. Azuma. Weighted sums of certain dependent random variables. Tohoku Mathematical
J., 68:357–367, 1967.
F. Bach. Active learning for misspecified generalized linear models. In Advances in Neural
Information Processing Systems 19. MIT Press, Cambridge, MA, 2007.
M.-F. Balcan, A. Beygelzimer, and J. Langford. Agnostic active learning. In William W. Cohen and Andrew Moore, editors, Proceedings of the International Conference on Machine
Learning, volume 148, pages 65–72, 2006.
S. Boyd and L Vandenberghe. Convex Optimization. Cambridge University Press, 2004.
D. Cohn, L. Atlas, and R. Ladner. Improving generalization with active learning. Machine
Learning, 15(2):201–221, 1994.
S. Dasgupta and D. Hsu. Hierarchical sampling for active learning. In Proceedings of the
25th International Conference on Machine learning, pages 208–215, 2008.
S. Dasgupta, A. Tauman Kalai, and C. Monteleoni. Analysis of perceptron-based active
learning. In Proc. of the Annual Conference on Learning Theory, pages 249–263, 2005.
S. Dasgupta, D. Hsu, and C. Monteleoni. A general agnostic active learning algorithm. In
Advances in Neural Information Processing Systems, volume 20, pages 353–360. 2008.
L. Devroye, L. Gyorfi, and G. Lugosi. A Probabilistic Theory of Pattern Recognition.
Springer, 1996.
S. Hanneke. A bound on the label complexity of agnostic active learning. In Proceedings of
the 24th International Conference on Machine Learning, pages 353–360, 2007.
M. Kääriäinen. Active learning in the non-realizable case. In Proceedings of 17th International Conference on Algorithmic Learning Theory, pages 63–77, 2006.
J. Langford. Practical prediction theory for classification. J. of Machine Learning Research,
6:273–306, 2005.
F. Pukelsheim. Optimal Design of Experiments, volume 50 of Classics in Applied Mathematics. Society for Industrial and Applied Mathematics, 2006.
E. Slud. Distribution inequalities for the binomial law. Annals of Probability, 5:404–412,
1977.
16

Importance Weighted Active Learning

M. Sugiyama. Active learning for misspecified models. In Advances in Neural Information
Processing Systems, volume 18, pages 1305–1312. MIT Press, Cambridge, MA, 2006.
B. Zadrozny, J. Langford, and N. Abe. Cost-sensitive learning by cost-proportionate example weighting. In Proceedings of the Third IEEE International Conference on Data
Mining, pages 435–442, 2003.

17

